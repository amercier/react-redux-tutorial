{"version":3,"sources":["selectors/story.js","constants/actionTypes.js","components/Button.jsx","components/Story.jsx","actions/archive.js","components/Stories.jsx","actions/story.js","components/SearchStories.jsx","components/App.jsx","reducers/story.js","reducers/archive.js","reducers/index.js","api/story.js","sagas/story.js","sagas/index.js","store/index.js","serviceWorker.js","index.jsx"],"names":["getReadableStories","_ref","archivedIds","storyState","archiveState","stories","filter","story","indexOf","objectID","STORY_ARCHIVE","STORIES_FETCH","STORIES_FETCH_ERROR","STORIES_ADD","Button","type","onClick","className","children","react_default","a","createElement","defaultProps","ButtonInline","_ref2","Button_Button","style","shape","label","string","width","isRequired","connect","title","url","author","num_comments","number","points","comments","archive","func","dispatch","onArchive","id","doArchiveStory","columns","href","Button_ButtonInline","COLUMNS","Stories","error","Object","keys","map","key","src_components_Story","state","doAddStories","doFetchErrorStories","SearchStories","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","query","onFetchStories","setState","preventDefault","onChange","value","target","components_Button","Component","doFetchStories","App","components_SearchStories","src_components_Stories","INITIAL_STATE","applyAddStories","action","applyFetchErrorStories","storyReducer","arguments","length","undefined","applyArchiveStory","concat","toConsumableArray","archiveReducer","rootReducer","combineReducers","fetchStories","fetch","then","response","json","handleFetchStories","result","regenerator_default","wrap","_context","prev","next","sent","put","hits","t0","stop","_marked","watchAll","all","takeEvery","sagas_marked","logger","createLogger","saga","createSagaMiddleware","store","createStore","applyMiddleware","run","rootSaga","Boolean","window","location","hostname","match","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9230f4f2.chunk.js","sourcesContent":["const isNotArchived = archivedIds => story =>\n  archivedIds.indexOf(story.objectID) === -1;\n\nconst getReadableStories = ({ storyState, archiveState }) =>\n  storyState.stories.filter(isNotArchived(archiveState));\n\nconst getFetchError = ({ storyState }) => storyState.error;\n\nexport { getReadableStories, getFetchError };\n","export const STORY_ARCHIVE = 'STORY_ARCHIVE';\nexport const STORIES_FETCH = 'STORIES_FETCH';\nexport const STORIES_FETCH_ERROR = 'STORIES_FETCH_ERROR';\nexport const STORIES_ADD = 'STORIES_ADD';\n","import React from 'react';\nimport { string, func, oneOf, node } from 'prop-types';\n\nconst Button = ({ type, onClick, className, children }) => (\n  // eslint-disable-next-line react/button-has-type\n  <button type={type} className={className} onClick={onClick}>\n    {children}\n  </button>\n);\n\nButton.propTypes = {\n  type: oneOf(['button', 'submit', 'cancel']).isRequired,\n  className: string,\n  onClick: func,\n  children: node.isRequired,\n};\n\nButton.defaultProps = {\n  className: null,\n  onClick: null,\n};\n\nconst ButtonInline = ({ type, onClick, children }) => (\n  <Button type={type} className=\"button-inline\" onClick={onClick}>\n    {children}\n  </Button>\n);\n\nButtonInline.propTypes = {\n  type: oneOf(['button', 'submit', 'cancel']).isRequired,\n  onClick: func.isRequired,\n  children: node.isRequired,\n};\n\nexport { ButtonInline };\nexport default Button;\n","import React from 'react';\nimport { number, string, func, shape } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { doArchiveStory } from '../actions/archive';\nimport { ButtonInline } from './Button';\nimport './Story.css';\n\nconst style = shape({\n  label: string,\n  width: string.isRequired,\n});\n\nexport const StoryProptypes = {\n  story: shape({\n    title: string,\n    url: string,\n    author: string,\n    num_comments: number,\n    points: number,\n    objectID: string,\n  }).isRequired,\n  columns: shape({\n    title: style.isRequired,\n    author: style.isRequired,\n    comments: style.isRequired,\n    points: style.isRequired,\n    archive: style.isRequired,\n  }).isRequired,\n  onArchive: func.isRequired,\n};\n\nconst Story = ({ story, columns, onArchive }) => {\n  const {\n    title,\n    url,\n    author,\n    num_comments: comments,\n    points,\n    objectID,\n  } = story;\n\n  return (\n    <div className=\"story\">\n      <span style={{ width: columns.title.width }}>\n        <a href={url}>{title}</a>\n      </span>\n      <span style={{ width: columns.author.width }}>{author}</span>\n      <span style={{ width: columns.comments.width }}>{comments}</span>\n      <span style={{ width: columns.points.width }}>{points}</span>\n      <span style={{ width: columns.archive.width }}>\n        <ButtonInline type=\"button\" onClick={() => onArchive(objectID)}>\n          Archive\n        </ButtonInline>\n      </span>\n    </div>\n  );\n};\n\nStory.propTypes = StoryProptypes;\n\nconst mapDispatchToProps = dispatch => ({\n  onArchive: id => dispatch(doArchiveStory(id)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(Story);\n","import { STORY_ARCHIVE } from '../constants/actionTypes';\n\nconst doArchiveStory = id => ({\n  type: STORY_ARCHIVE,\n  id,\n});\n\nexport { doArchiveStory };\n","import React from 'react';\nimport { arrayOf, instanceOf } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getReadableStories, getFetchError } from '../selectors/story';\nimport './Stories.css';\n\nimport Story, { StoryProptypes } from './Story';\n\nconst COLUMNS = {\n  title: {\n    label: 'Title',\n    width: '40%',\n  },\n  author: {\n    label: 'Author',\n    width: '30%',\n  },\n  comments: {\n    label: 'Comments',\n    width: '10%',\n  },\n  points: {\n    label: 'Points',\n    width: '10%',\n  },\n  archive: {\n    width: '10%',\n  },\n};\n\nconst Stories = ({ stories, error }) => (\n  <div className=\"stories\">\n    <div className=\"stories-header\">\n      {Object.keys(COLUMNS).map(key => (\n        <span key={key} style={{ width: COLUMNS[key].width }}>\n          {COLUMNS[key].label}\n        </span>\n      ))}\n    </div>\n\n    {error && <p className=\"error\">Something went wrong ...</p>}\n\n    {(stories || []).map(story => (\n      <Story key={story.objectID} story={story} columns={COLUMNS} />\n    ))}\n  </div>\n);\n\nStories.propTypes = {\n  stories: arrayOf(StoryProptypes.story).isRequired,\n  error: instanceOf(Error),\n};\n\nStories.defaultProps = {\n  error: null,\n};\n\nconst mapStateToProps = state => ({\n  stories: getReadableStories(state),\n  error: getFetchError(state),\n});\n\nexport default connect(mapStateToProps)(Stories);\n","import {\n  STORIES_ADD,\n  STORIES_FETCH,\n  STORIES_FETCH_ERROR,\n} from '../constants/actionTypes';\n\nconst doAddStories = stories => ({\n  type: STORIES_ADD,\n  stories,\n});\n\nconst doFetchStories = query => ({\n  type: STORIES_FETCH,\n  query,\n});\n\nconst doFetchErrorStories = error => ({\n  type: STORIES_FETCH_ERROR,\n  error,\n});\n\nexport { doAddStories, doFetchStories, doFetchErrorStories };\n","import React, { Component } from 'react';\nimport { func } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { doFetchStories } from '../actions/story';\nimport Button from './Button';\n\nclass SearchStories extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: '',\n    };\n  }\n\n  onSubmit = event => {\n    const { query } = this.state;\n    if (query) {\n      const { onFetchStories } = this.props;\n      onFetchStories(query);\n      this.setState({ query: '' });\n    }\n\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    const { value } = event.target;\n    this.setState({ query: value });\n  };\n\n  render() {\n    const { query } = this.state;\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input type=\"text\" value={query} onChange={this.onChange} />\n        <Button type=\"submit\">Search</Button>\n      </form>\n    );\n  }\n}\n\nSearchStories.propTypes = {\n  onFetchStories: func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onFetchStories: query => dispatch(doFetchStories(query)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(SearchStories);\n","import React from 'react';\nimport './App.css';\n\nimport Stories from './Stories';\nimport SearchStories from './SearchStories';\n\nconst App = () => (\n  <div className=\"app\">\n    <div className=\"interactions\">\n      <SearchStories />\n    </div>\n    <Stories />\n  </div>\n);\n\nexport default App;\n","import { STORIES_ADD, STORIES_FETCH_ERROR } from '../constants/actionTypes';\n\nconst INITIAL_STATE = {\n  stories: [],\n  error: null,\n};\n\nconst applyAddStories = (state, action) => ({\n  stories: action.stories,\n  error: null,\n});\n\nconst applyFetchErrorStories = (state, action) => ({\n  stories: [],\n  error: action.error,\n});\n\nfunction storyReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case STORIES_ADD: {\n      return applyAddStories(state, action);\n    }\n    case STORIES_FETCH_ERROR: {\n      return applyFetchErrorStories(state, action);\n    }\n    default:\n      return state;\n  }\n}\n\nexport default storyReducer;\n","import { STORY_ARCHIVE } from '../constants/actionTypes';\n\nconst INITIAL_STATE = [];\n\nconst applyArchiveStory = (state, action) => [...state, action.id];\n\nfunction archiveReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case STORY_ARCHIVE: {\n      return applyArchiveStory(state, action);\n    }\n    default:\n      return state;\n  }\n}\n\nexport default archiveReducer;\n","import { combineReducers } from 'redux';\nimport storyReducer from './story';\nimport archiveReducer from './archive';\n\nconst rootReducer = combineReducers({\n  storyState: storyReducer,\n  archiveState: archiveReducer,\n});\n\nexport default rootReducer;\n","const HN_BASE_URL = 'http://hn.algolia.com/api/v1/search?query=';\n\nconst fetchStories = query =>\n  fetch(HN_BASE_URL + query).then(response => response.json());\n\nexport { fetchStories };\n","import { call, put } from 'redux-saga/effects';\nimport { doAddStories, doFetchErrorStories } from '../actions/story';\nimport { fetchStories } from '../api/story';\n\nfunction* handleFetchStories(action) {\n  const { query } = action;\n\n  try {\n    const result = yield call(fetchStories, query);\n    yield put(doAddStories(result.hits));\n  } catch (error) {\n    yield put(doFetchErrorStories(error));\n  }\n}\n\nexport { handleFetchStories };\n","import { takeEvery, all } from 'redux-saga/effects';\nimport { STORIES_FETCH } from '../constants/actionTypes';\nimport { handleFetchStories } from './story';\n\nfunction* watchAll() {\n  yield all([takeEvery(STORIES_FETCH, handleFetchStories)]);\n}\n\nexport default watchAll;\n","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst logger = createLogger();\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  undefined,\n  applyMiddleware(saga, logger),\n);\n\nsaga.run(rootSaga);\n\nexport default store;\n","/* global process */\n/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}